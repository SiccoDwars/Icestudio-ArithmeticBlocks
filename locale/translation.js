// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('int_math_sd');
gettext('utils');
gettext('int16');
gettext('int24');
gettext('int32');
gettext('int48');
gettext('int8');
gettext('uint16');
gettext('uint24');
gettext('uint32');
gettext('abs_int16');
gettext('16 bits signed integer absolute value ( y = abs (a) ) ');
gettext('add_int16_sat');
gettext('16 bits signed integer add with minint,maxint saturation');
gettext('compare_int16');
gettext('16 bits signed integer value comparator');
gettext('div_int16');
gettext('16 bits signed integer divider');
gettext('div_int16_clocked');
gettext('16 bits signed integer division, y = a * 16384  /  b');
gettext('max_int16');
gettext('16 bits signed integer maximum value selector');
gettext('min_int16');
gettext('16 bits signed integer minimum value selector');
gettext('mul_int16');
gettext('mul_int16_32');
gettext('16 bit inputs signed integer multiplier, 32 bits output');
gettext('mul_int16_sat');
gettext('16 bits signed integer multiplication with minint,maxint saturation, 100%=16384');
gettext('muldiv_int16_sat');
gettext('16 bits signed integer multiplication and division with minint,maxint saturation, 100%=16384');
gettext('muldiv_int16_sat_clocked');
gettext('clocked 16 bits signed integer multiplication and division with minint,maxint saturation');
gettext('neg_int16');
gettext('16 bits signed integer negation ( y = -a ) ');
gettext('nop_int16');
gettext('16 bits signed integer no operation (y=a)');
gettext('nop_int16_clocked');
gettext('pos and neg edge d-flipflip, 16 bits');
gettext('select_int16');
gettext('16 bits signed integer value selector (switch, mux)');
gettext('sub_int16_sat');
gettext('16 bits signed integer subtract with minint,maxint saturation');
gettext('abs_int24');
gettext('24 bits signed integer absolute value ( y = abs (a) ) ');
gettext('add_int24_sat');
gettext('24 bits signed integer add with minint,maxint saturation');
gettext('compare_int24');
gettext('24 bits signed integer value comparator');
gettext('div_int24');
gettext('24 bits signed integer divider');
gettext('max_int24');
gettext('24 bits signed integer maximum value selector');
gettext('min_int24');
gettext('24 bits signed integer minimum value selector');
gettext('mul_int24_48');
gettext('24 bit inputs signed integer multiplier, 48 bits output');
gettext('muldiv_int16_sat');
gettext('muldiv_int24');
gettext('24 bits signed integer multiply divide with output saturation, 48 bits internal');
gettext('Puerta OR');
gettext('48 bits signed integer division, divide 48 bits numerator by a 24 bits int denominator, result in 24 bits int');
gettext('neg_int24');
gettext('24 bits signed integer negation ( y = -a ) ');
gettext('nop_int24');
gettext('24 bits signed integer no operation (y=a)');
gettext('nop_int24_clocked');
gettext('pos and neg edge d-flipflip, 24 bits');
gettext('select_int24');
gettext('24 bits signed integer value selector (switch, mux)');
gettext('sub_int24_sat');
gettext('24 bits signed integer subtract with minint,maxint saturation');
gettext('add_int32_sat');
gettext('32 bits signed integer add with minint,maxint saturation');
gettext('div_int32');
gettext('32 bits signed integer divider');
gettext('div_int32_16');
gettext('32 bits signed integer division, divide 32 bits numerator by a 16 bits int denominator, result in 16 bits int');
gettext('sub_int32_sat');
gettext('32 bits signed integer subtract with minint,maxint saturation');
gettext('div_int48_24');
gettext('mul_int8_16');
gettext('8 bit inputs signed integer multiplier, 16 bits output');
gettext('div_uint16');
gettext('16 bits unsigned divider');
gettext('sqrt_uint16');
gettext('16 bits unsigned integer square root');
gettext('div_uint24');
gettext('24 bits unsigned divider');
gettext('sqrt_uint24');
gettext('24 bits unsigned integer square root');
gettext('div_uint32');
gettext('32 bits unsigned divider');
gettext('sqrt_uint32');
gettext('32 bits unsigned integer square root');
gettext('timer_16bits');
gettext('measure time by counting clk periods between start and stop pulse');
gettext('test_serial_muldiv_int16');
gettext('Registro de 16 bits');
gettext('Puerta NOT');
gettext('Transmisor serie (hecho a partir de bloques)');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Un bit constante a 1');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('Un simple cable pasivo, para organizar las conexiones complicadas');
gettext('Corazón de tics para generar las velocidades de transmisión serie en baudios (Por defecto emite tics a 11500 baudios)');
gettext('Registro de desplazamiento (derecha) de 9 bits');
gettext('Agregador de buses de 8 y 2 bits a uno de 9bits');
gettext('Un bit constante a 0');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Convierte números (0..65535) introducidos desde el serial a binario de 16 bits.');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('Char detect & LF, CR, space & comma.');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Puerta AND');
gettext('Puerta OR de 4 entradas');
gettext('Convierte un número ASCII a binario de 16 bits.');
gettext('Registro doble de 16 bits, con entrada normal y el reset vale el ASCII 48 ----->'0'.');
gettext('Registro de 8 bits ASCII');
gettext('16 bits signed integer multiply divide with output saturation, 32 bits internal');
gettext('Biestable De del sistema que hay que  \nañadir para cumplir las reglas de diseño  \nsíncrono: toda señal sacada al exterior,  \nespecialmente si es un cable de comunicaciones  \nasíncronas, debe pasar por un biestable');
gettext('Este Biestable desde  \nestar inicialmente  \na 1, ya que es el  \nvalor de reposo de la  \nlínea serie');
gettext('**Registro de**\n**Desplazamiento**');
gettext('Conversión de los datos serie a  \nparalelo, mediante un registro  \nde 9 bits. Inicialmente tiene todos  \nsus bits a 1, porque la línea está  \nen reposo');
gettext('**Biestable D**');
gettext('Evento: Comienzo de \ntransmisión');
gettext('Cargar el registro con  \nel dato a enviar en el  \narranque (0 -> 1)');
gettext('**Biestable RS**  \nEstado del transmisor');
gettext('0: Parado. Sin transmitir  \n1: Ocupado. Transmitiendo dato');
gettext('**Generador de**\n**Baudios**');
gettext('Contador de bits  \ntransmitidos');
gettext('El registro de desplazamiento  \nes de 9 bits, para almacenar  \nlos 8 bits de datos y  \nel bit de comienzo (start)');
gettext('Evento: Ultimo  \nbit enviado');
gettext('Al enviarse el último  \nbit, se cambia el estado  \na parado (reset)');
gettext('**Cable pasivo**  \nPara organizar el  \ncableado del reloj');
gettext('**Dato a transmitir**');
gettext('**Bit de Stop**');
gettext('**Bit de start**');
gettext('**Tic de transmisión**  \n¡Que comience la  \ntransmisión!');
gettext('**Línea serie**');
gettext('**Tic de terminación (done)**');
gettext('**Reloj del sistema**');
gettext('**BAUDIOS**\n');
gettext('El tic de terminación está un  \nperiodo de reloj retrasado para  \nque el transmisor pase al estado  \nParado, y que todo se reinicie  \nantes de que se pueda volve a  \nenviar el siguiente caracter');
gettext('El estado del transmisor  \nse saca por la señal  \nbusy');
gettext('Arrancar el generar de baudios  \nal activarse el transmisor');
gettext('**Parámetro**: Módulo del contador');
gettext('Estos registros de 8 bits con reset son especiales. Cuando recibe un reset no se pone a 0, sino a 48, que es el '0' ASCII.');
gettext('Estos registros se inician con el valor 48 ('0' en ASCII).');
gettext('Convierte el valor ASCII a binario.');
gettext('Cuando recibe LF o CR produce un pulso en \"rst\" para el resto de caracteres da un pulso por \"tic\".');
gettext('test_serial_sqrt_uint16');
